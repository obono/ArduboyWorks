#include "common.h"

/*  Defines  */

enum STATE_T : uint8_t {
    STATE_INIT = 0,
    STATE_TOP,
    STATE_CREDIT,
    STATE_STARTED,
};

/*  Local Functions  */

static void handleInit(void);
static void handleTop(void);
static void handleAnyButton(void);

static void onTop(void);
static void onStart(void);
static void onCredit(void);

static void drawInit(void);
static void drawTop(void);
static void drawCredit(void);
static void drawTitleLogo(int16_t x, int16_t y);
static void drawText(const char *p, int lines);

/*  Local Functions (macros)  */

#define callHandlerFunc(n)  ((void (*)(void)) pgm_read_ptr(handlerFuncTable + n))()
#define callDrawerFunc(n)   ((void (*)(void)) pgm_read_ptr(drawerFuncTable + n))()

/*  Local Constants  */

PROGMEM static const uint8_t imgTitleUpper[] = { // 126x32
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x06, 0x02, 0x02, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x42, 0x42, 0x42, 0xBE, 0xC0, 0x38, 0x10, 0x08, 0x04, 0x04, 0x82, 0x42, 0xC1, 0x01,
    0x01, 0x01, 0x02, 0x02, 0x06, 0xFC, 0x80, 0xC0, 0x60, 0x10, 0x08, 0x04, 0x04, 0x82, 0x42, 0xC1,
    0x01, 0x01, 0x01, 0x02, 0x02, 0x0C, 0xF0, 0x80, 0xC0, 0x20, 0x10, 0x08, 0x04, 0x04, 0x82, 0x42,
    0xC1, 0x01, 0x01, 0x01, 0x02, 0x02, 0x0C, 0xF0, 0x00, 0x60, 0xA0, 0x10, 0x08, 0x04, 0x02, 0x12,
    0x0E, 0x07, 0x01, 0x81, 0xE1, 0x79, 0x0D, 0x07, 0x01, 0x01, 0x01, 0x09, 0x05, 0x83, 0x4C, 0x50,
    0xA0, 0xC0, 0xC0, 0x78, 0x1E, 0x03, 0x01, 0x01, 0xC1, 0x21, 0xA1, 0x61, 0x01, 0x01, 0x01, 0x01,
    0xC1, 0x21, 0xA1, 0x61, 0x01, 0x01, 0x01, 0x01, 0xC1, 0x31, 0xCD, 0x33, 0x0C, 0x00, 0x00, 0x00,
    0x30, 0x4C, 0x43, 0x40, 0x40, 0x40, 0x60, 0xA0, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE,
    0xE1, 0x3F, 0x07, 0x01, 0x00, 0x00, 0xC0, 0x30, 0xCC, 0xF2, 0x3D, 0x0E, 0x03, 0x00, 0x00, 0x80,
    0x60, 0xF8, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x80, 0x60, 0x98, 0xE6, 0x39, 0x0E, 0x03, 0x00, 0x00,
    0x80, 0x70, 0xF8, 0x1F, 0x07, 0x01, 0x00, 0x00, 0xC0, 0x30, 0xCC, 0xF2, 0x3D, 0x0E, 0x03, 0x00,
    0x00, 0xC0, 0x30, 0xEC, 0xFB, 0x1C, 0x07, 0x84, 0x84, 0x05, 0x02, 0x03, 0x01, 0x80, 0xE0, 0x70,
    0x1E, 0x07, 0x01, 0x80, 0x60, 0xC0, 0x82, 0x81, 0x41, 0xA2, 0xB5, 0xCA, 0xF1, 0x79, 0x1E, 0x07,
    0x01, 0x00, 0xC0, 0x40, 0x40, 0x47, 0x44, 0x43, 0x41, 0x40, 0x40, 0x40, 0xC0, 0x07, 0x04, 0x03,
    0x01, 0x00, 0x80, 0x60, 0x98, 0x66, 0x19, 0x06, 0x01, 0x00, 0x00, 0x00, 0x7F, 0xC1, 0x81, 0x81,
    0x81, 0x81, 0x83, 0x84, 0x83, 0x41, 0x40, 0xA0, 0xA0, 0x50, 0x28, 0x14, 0x0B, 0x3F, 0x40, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x83, 0x82, 0x41, 0x40, 0xA0, 0x50, 0x28, 0x14, 0x0B, 0x04, 0x3F, 0x41,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x83, 0x82, 0x41, 0x40, 0xA0, 0x50, 0x28, 0x14, 0x0B, 0x04, 0x7F,
    0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x83, 0x82, 0x41, 0x40, 0xA0, 0x50, 0x28, 0x14, 0x0B, 0x0C,
    0x77, 0x82, 0x83, 0x42, 0x41, 0xA1, 0x50, 0x50, 0x28, 0x14, 0x7B, 0xC7, 0x81, 0x80, 0x80, 0x80,
    0x82, 0x83, 0x41, 0x40, 0xA0, 0x50, 0xED, 0xF3, 0x9C, 0x87, 0x81, 0x80, 0x80, 0x60, 0x9C, 0x63,
    0x1C, 0x03, 0x01, 0x01, 0xE1, 0x9F, 0x83, 0x83, 0x43, 0x43, 0x41, 0x40, 0xA0, 0x50, 0x28, 0x16,
    0x09, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x02, 0x82, 0xE2, 0xF2, 0x7A, 0x72, 0x31, 0x31, 0x00, 0xD8, 0xF0, 0xF0, 0x60, 0x80, 0xF0, 0xFA,
    0x72, 0x71, 0x01, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0xD2, 0xF2, 0xF2, 0xE2, 0xE2, 0x62, 0x82,
    0x01, 0x01, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0xC2, 0xE1, 0xC0, 0xC0, 0xC0, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x02, 0x82, 0x81, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xC0, 0xC0
};

PROGMEM static const uint8_t imgTitleLower[] = { // 81x20
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC4, 0x66, 0x3B, 0x39, 0x1E, 0x0F, 0x02, 0xFE, 0xFC, 0x60,
    0x09, 0xCD, 0xF6, 0xFF, 0xFF, 0xFF, 0x3E, 0x46, 0x3E, 0x5E, 0x2F, 0xC7, 0xF7, 0xFA, 0xFC, 0x7F,
    0x9F, 0x6F, 0x17, 0x0B, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0xFC,
    0x7F, 0x9F, 0x6F, 0x17, 0x0B, 0x05, 0x05, 0x04, 0x00, 0x00, 0x00, 0x80, 0xE7, 0xFF, 0xFF, 0xFF,
    0xFC, 0x00, 0xF0, 0x00, 0x00, 0x80, 0xF8, 0xFE, 0xFF, 0x7F, 0xBF, 0x5F, 0x2F, 0x13, 0x0D, 0x02,
    0x01, 0x80, 0xE0, 0xF8, 0xFF, 0xFF, 0x7F, 0x1F, 0xC3, 0xF1, 0xFD, 0x7F, 0xBF, 0xCF, 0x62, 0x70,
    0xBC, 0x5F, 0x4F, 0x07, 0xFB, 0xFF, 0x7F, 0xBF, 0x53, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
    0xEE, 0xE1, 0xE0, 0xF0, 0xF0, 0x70, 0xB0, 0xB8, 0x58, 0x2C, 0x16, 0x02, 0x78, 0xFF, 0xFF, 0xFF,
    0xFF, 0x7C, 0x9D, 0x66, 0x1A, 0x05, 0x02, 0x00, 0x00, 0x06, 0x0E, 0xBC, 0xBF, 0xBF, 0x5F, 0x2F,
    0x17, 0x09, 0x86, 0xE1, 0xE0, 0xF0, 0xF7, 0x67, 0xAB, 0x4C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x0B, 0x0B, 0x0B, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x00, 0x02, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0B, 0x0B, 0x0B,
    0x0B, 0x05, 0x05, 0x05, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05,
    0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x03, 0x0B, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00
};


PROGMEM static const char creditText[] = \
        "I WANT $5 QUADRILLION\0\0\0" APP_RELEASED "\0PROGRAMMED BY OBONO\0\0" \
        "THIS PROGRAM IS\0RELEASED UNDER\0THE MIT LICENSE.\0\e";

PROGMEM static void(*const handlerFuncTable[])(void) = {
    handleInit, handleTop, handleAnyButton
};

PROGMEM static void(*const drawerFuncTable[])(void) = {
    drawInit, drawTop, drawCredit
};

/*  Local Variables  */

static STATE_T  state = STATE_INIT;

/*---------------------------------------------------------------------------*/
/*                              Main Functions                               */
/*---------------------------------------------------------------------------*/

void initTitle(void)
{
    if (state == STATE_INIT) {
        counter = 30;
    } else {
        onTop();
    }
}

MODE_T updateTitle(void)
{
    callHandlerFunc(state);
    randomSeed(rand() ^ micros()); // Shuffle random
    return (state == STATE_STARTED) ? MODE_GAME : MODE_TITLE;
}

void drawTitle(void)
{
    if (state == STATE_STARTED) return;
    callDrawerFunc(state);
    isInvalid = false;
}

/*---------------------------------------------------------------------------*/
/*                             Control Functions                             */
/*---------------------------------------------------------------------------*/

static void handleInit(void)
{
    if (--counter == 0) onTop();
    isInvalid = true;
}

static void handleTop(void)
{
    handleMenu();
}

static void handleAnyButton(void)
{
    if (ab.buttonDown(A_BUTTON | B_BUTTON)) {
        playSoundClick();
        state = STATE_TOP;
        isInvalid = true;
    }
}

/*---------------------------------------------------------------------------*/
/*                               Menu Handlers                               */
/*---------------------------------------------------------------------------*/

static void onTop(void)
{
    clearMenuItems();
    addMenuItem(F("GAME START"), onStart);
    addMenuItem(F("CREDIT"), onCredit);
    setMenuItemPos(0);
    setMenuCoords(28, 53, 72, 11, false, true);
    state = STATE_TOP;
    isInvalid = true;
}

static void onStart(void)
{
    state = STATE_STARTED;
}

static void onCredit(void)
{
    playSoundClick();
    state = STATE_CREDIT;
    isInvalid = true;
}

/*---------------------------------------------------------------------------*/
/*                              Draw Functions                               */
/*---------------------------------------------------------------------------*/

static void drawInit(void)
{
    ab.clear();
    drawTitleLogo(random(-counter, counter + 1), random(-counter, counter + 1));
}

static void drawTop(void)
{
    if (isInvalid) {
        ab.clear();
        drawTitleLogo(0, 0);
    }
    drawMenuItems(isInvalid);
}

static void drawCredit(void)
{
    if (isInvalid) {
        ab.clear();
        drawText(creditText, 11);
    }
}

/*---------------------------------------------------------------------------*/

static void drawTitleLogo(int16_t x, int16_t y)
{
    ab.drawBitmap(x, y, imgTitleUpper, 126, 32);
    ab.drawBitmap(x + 47, y + 32, imgTitleLower, 81, 20);
}

static void drawText(const char *p, int16_t y)
{
    while (pgm_read_byte(p) != '\e') {
        uint8_t len = strnlen_P(p, 21);
        ab.printEx(64 - len * 3, y, (const __FlashStringHelper *) p);
        p += len + 1;
        y += (len == 0) ? 2 : 6;
    }
}
